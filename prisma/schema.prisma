generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  decks          Deck[]
  createdAt      DateTime        @default(now())
  sessions       Session[]
  passwordResets PasswordReset[]

  @@map("users")
}

model Deck {
  id          String     @id @default(uuid())
  name        String
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  cards       DeckCard[]
  commanderEntry DeckCommander? @relation("DeckCommanderRelation")
  @@map("decks")
}

model DeckCard {
  id            String   @id @default(uuid())
  deck          Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId        String
  cardName      String
  typeLine      String
  cmc           Float
  quantity      Int     @default(1)

  images         DeckCardImage[]
  colors         DeckCardColor[]
  colorIdentity  DeckCardColorIdentity[]
  commanderIn    DeckCommander[]

  @@map("deck_cards")
}

model DeckCardColor {
  id         String    @id @default(uuid())
  deckCard   DeckCard  @relation(fields: [deckCardId], references: [id], onDelete: Cascade)
  deckCardId String
  color      String

  @@map("deck_card_colors")
}

model DeckCommander {
  id            String    @id @default(uuid())
  deck          Deck      @relation("DeckCommanderRelation", fields: [deckId], references: [id], onDelete: Cascade)
  deckId        String    @unique
  card          DeckCard  @relation(fields:[deckCardId], references: [id], onDelete: Cascade)
  deckCardId    String    @unique

  @@map("deck_commanders")
}

model DeckCardImage {
  id            String   @id @default(uuid())
  deckCard      DeckCard  @relation(fields:[deckCardId], references: [id], onDelete: Cascade)
  deckCardId    String
  imageType     String
  uri           String

  @@map("deck_card_images")
}

model DeckCardColorIdentity {
  id         String    @id @default(uuid())
  deckCard   DeckCard  @relation(fields: [deckCardId], references: [id], onDelete: Cascade)
  deckCardId String
  color      String

  @@map("deck_card_color_identities")
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
  expiresAt DateTime

  @@map("password_resets")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("sessions")
}